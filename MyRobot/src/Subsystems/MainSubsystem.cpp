// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "MainSubsystem.h"
#include "../RobotMap.h"
#include "../Commands/FireShooter.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

MainSubsystem::MainSubsystem() : Subsystem("MainSubsystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //liftSolenoidDouble = RobotMap::mainSubsystemLiftSolenoidDouble;
	loaderSol1 = RobotMap::solenoid0;
	loaderSol2 = RobotMap::solenoid1;
	latchSol1 = RobotMap::solenoid2;
	latchSol2 = RobotMap::solenoid3;
	armSol1 = RobotMap::solenoid4;
	armSol2 = RobotMap::solenoid5;

	frontLS = RobotMap::frontLS;
	sideLS = RobotMap::sideLS;
	backLS = RobotMap::backLS;

	armSol1.get()->Set(false);
	armSol2.get()->Set(false);
	loaderSol1.get()->Set(false);
	loaderSol2.get()->Set(false);
	latchSol1.get()->Set(false);
	latchSol2.get()->Set(false);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void MainSubsystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    //SetDefaultCommand(new FireShooter());
    //SetDefaultCommand(new LowerArm());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

//used in testing functionality of pneumatics
void MainSubsystem::moveShooter(std::shared_ptr<Joystick> rightJoystick){
	if (rightJoystick.get()->GetY() > 0.1){
		//armSol.get()->Set(DoubleSolenoid::kForward);
		//shooterSol1.get()->Set(false);
		//shooterSol2.get()->Set(true);
		armSol1.get()->Set(true);
		armSol2.get()->Set(false);
	}else if (rightJoystick.get()->GetY() < -0.1){
		//armSol.get()->Set(DoubleSolenoid::kReverse);
		//shooterSol1.get()->Set(true);
		//shooterSol2.get()->Set(false);
		armSol1.get()->Set(false);
		armSol2.get()->Set(true);
	}else{
		//stopShooter();
		stopArm();
	}
}

/*
void MainSubsystem::stopShooter(){
	//armSol.get()->Set(DoubleSolenoid::kOff);
	//shooterSol1.get()->Set(false);
	//shooterSol2.get()->Set(false);
}*/

void MainSubsystem::liftArm(){
	armSol1.get()->Set(true);
	armSol2.get()->Set(false);
}
void MainSubsystem::lowerArm(){
	armSol1.get()->Set(false);
	armSol2.get()->Set(true);
}
void MainSubsystem::stopArm(){
	armSol1.get()->Set(false);
	armSol2.get()->Set(false);
}


void MainSubsystem::loadShooter(){
	//initialize all off

	//set loader to move to back of robot
	loaderSol1.get()->Set(true);
	loaderSol2.get()->Set(false);
	/*//turn off loader and set latch to lock when the back limit switch is hit
	if (backLS.get()){
		loaderSol1.get()->Set(false);
		loaderSol2.get()->Set(false);
		latchSol1.get()->Set(true);
		latchSol2.get()->Set(false);
	}
	//wait for guaranteed locking
	Wait(0.2);
	//all off in command End()*/
}
void MainSubsystem::unloadShooter(){
	//unlock latch
	latchSol1.get()->Set(false);
	latchSol2.get()->Set(true);
	//wait for guaranteed unlock
	Wait(0.2);
	//turn off latch and set loader towards front of robot
	latchSol1.get()->Set(false);
	latchSol2.get()->Set(false);
	loaderSol1.get()->Set(false);
	loaderSol2.get()->Set(true);
	//wait for loader to trigger front limit switch
	//Wait(2);
	while(!frontLS.get()){}
	//turn off loader
	loaderSol1.get()->Set(false);
	loaderSol2.get()->Set(false);
}
void MainSubsystem::fireShooter(){
	//set loader towards front of robot
	loaderSol1.get()->Set(false);
	loaderSol2.get()->Set(true);
	//wait for guaranteed loader base to reach front of robot
	Wait(0.2);
	//turn off loader and set latch to unlock
	loaderSol1.get()->Set(false);
	loaderSol2.get()->Set(false);
	latchSol1.get()->Set(false);
	latchSol2.get()->Set(true);
	//wait for loader to get out of latch
	//Wait(2);
	while(!backLS.get() && sideLS.get()){}//check if this works
	//turn off latch
	latchSol1.get()->Set(false);
	latchSol2.get()->Set(false);
}
/*
void MainSubsystem::testSol(){
	latchSol1.get()->Set(false);
	latchSol2.get()->Set(true);
	//loader
	//ff = off
	//ft = goes to front of robot
	//tf = goes to back of robot
	//latch
	//ff = off
	//ft = unlocking
	//tf = locking
}*/
