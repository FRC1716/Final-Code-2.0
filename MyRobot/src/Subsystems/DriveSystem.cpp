// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "DriveSystem.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Drive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveSystem::DriveSystem() : Subsystem("DriveSystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeft = RobotMap::driveSystemFrontLeft;
    frontRight = RobotMap::driveSystemFrontRight;
    rearLeft = RobotMap::driveSystemRearLeft;
    rearRight = RobotMap::driveSystemRearRight;
    robotDrive = RobotMap::driveSystemDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void DriveSystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    SetDefaultCommand(new Drive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveSystem::drive(std::shared_ptr<Joystick> left, std::shared_ptr<Joystick> right){
	//needed to invert joystick to motor side
	//extends the "zero" zone of the joysticks to prevent unwanted movement
	if (right->GetY() > 0.1 || right->GetY() < -0.1){
		//limits the max speed to 50%
		if (right->GetY() < 0.5 && right->GetY() > -0.5){
			frontLeft->Set(right->GetY());
			rearLeft->Set(right->GetY());
		}
	}
	//same thing for the other side
	if (left->GetY() > 0.1 || left->GetY() < -0.1){
		if (left->GetY() < 0.5 && left->GetY() > -0.5){
			frontRight->Set(-left->GetY());
			rearRight->Set(-left->GetY());
		}
	}
}
void DriveSystem::stop(){
	//stops all movement of drive motors
	frontLeft->Set(0);
	rearLeft->Set(0);
	frontRight->Set(0);
	rearRight->Set(0);
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
