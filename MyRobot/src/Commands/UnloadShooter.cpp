// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "UnloadShooter.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

UnloadShooter::UnloadShooter(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::mainSubsystem.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	SetInterruptible(true);
	finish = false;
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void UnloadShooter::Initialize() {
	finish = false;
}

// Called repeatedly when this Command is scheduled to run
void UnloadShooter::Execute() {
	//move lower loader part to back of robot
	Robot::mainSubsystem->loaderSol1->Set(true);
	Robot::mainSubsystem->loaderSol2->Set(false);
	//wait for lower loader to get to back
	Wait(1.5);
	//while(!Robot::mainSubsystem->sideLS->Get()){}//not implemented because upper platform is triggering limit switch all the time
	//unlock latch
	Robot::mainSubsystem->latchSol1->Set(false);
	Robot::mainSubsystem->latchSol2->Set(true);
	//wait for guaranteed unlock
	Wait(0.2);
	//turn off latch and set loader towards front of robot
	Robot::mainSubsystem->latchSol1->Set(false);
	Robot::mainSubsystem->latchSol2->Set(false);
	Robot::mainSubsystem->loaderSol1->Set(false);
	Robot::mainSubsystem->loaderSol2->Set(true);
	//wait for loader to get to the front
	//Wait(2);
	while(!Robot::mainSubsystem->frontLS->Get()){}
	//turn off loader
	Robot::mainSubsystem->loaderSol1->Set(false);
	Robot::mainSubsystem->loaderSol2->Set(false);

	finish = true;
}

// Make this return true when this Command no longer needs to run execute()
bool UnloadShooter::IsFinished() {
    return finish;
}

// Called once after isFinished returns true
void UnloadShooter::End() {
	//turn off solenoid components
	Robot::mainSubsystem->latchSol1->Set(false);
	Robot::mainSubsystem->latchSol2->Set(false);
	Robot::mainSubsystem->loaderSol1->Set(false);
	Robot::mainSubsystem->loaderSol2->Set(false);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void UnloadShooter::Interrupted() {
	End();
}
